
* harir 
** TODO IMMEDIATELY:  create a pipeline from authoring-> rendering
*** this will put you onto updating lang->tex
** need a concept of "cursor"
** start with cowboy editing---w/e you type replaces
** fail fast:  start by speeding up just the *input* 0=4x^2 + 4x +1
this will give you all sorts of ideas.  You may end up getting distracted
but that's ok.



** I suspect there's a lot of low-hanging fruit in using the homerow
* ugh
https://www.axsoft.co/
http://equalx.sourceforge.net/
https://www.mathicando.com/index.html?features (esp!)
http://mathquill.com/ -> open source
http://www.wiris.com/mathtype big focus on word processing?
https://math-editor.com/semanticEditorDemo.html <- the russians, softaria

* honorable mention
https://github.com/johnbcoughlin/calctex

* 
you know, everyone and their dog has one of these, but they STILL ALL SUCK
like it was depressing finding all of these, but none of them actually fix the problem

they're made for students, not power users
power users are assumed to be using LaTeX




* 
literally just authoring that doesn't make me type + or - or * ^ don't make me leave the home row
and that lets me edit with something like the power of paredit

I do like the idea of selected + fn -> parens around, not-selected -> empty, places cursor
also escape-up, that puts cursor outside the current nest level

and maybe bind-as?


honestly paredit and emacs bindings are as big a part of this as anything else
Ctrl-space, Alt-F, Alt-R, Alt-S, Ctrl-G

sorry guys, but editing math expressions is editing trees, and paredit is the best for editing trees

a selection that can serve as a fn definition consists of a node and all children, and exceptions
you can have multiple selections


* differentiators:
 - tree based
 - GAME UI
 - a focus on speed., feeling of power
 - tutorial
 - infix input
 - tree navigation---want to actively teach and reward hotkey use
 - minor, minor comp algebra
 - but...done badly
 - compensated for with really, really freaking good authoring/editing
 - both are really important.  People's options for writing math are TERRIBLE:  latex, random emacs modes...plus and equals are on the same key!
 - seriously, authoring absolutely sucks
 - think how much you hate writing in things that aren't emacs
 - that's the level of power you're going for
 - treat math like a game.  hold their hand.  Your job isn't to teach them, it's to get them done w/their homework.

 - computer keyboards are meant for typing letters
 - that makes the math experience REALLY SUCK
 - but if you replace those hotkeys...
 - to an extent this would all probably be more straightforward in elisp lol
 
 - convenience features for homework: numbering, etc.
 - indexed help



* fuzziness; if they get it "wrong," should work with it anyway---right<->down, left<->up




* easy hotkey assign (by me, not user yet)



* authoring, editing, 

** authoring
*** we're looking at a multi-tiered model
 keystrokes -> strings (even one-letter strings) -> commands -> which affect the actual tree by adding to it
*** "authoring" sometimes means replacing, or shoving aside and authoring in place
    
*** scratch: 
authoring and editing reinforce each other
n-> homerow -> numerical input! na -> 1, ns -> 2, all the way through ;

the authoring is just SUPER important, you must preserve the "playing around" aspect
they should NEVER feel trapped

and remember:  because authoring is the FIRST thing they run into, has to be super good
 - though it *can* require some investment if you want; you can get some minutes of learning
out of them and bring them up gradually through a tutorial

between ctrl, shift and alt, you have a lot of keys to work with

letters of note: xyz t fg s n
Mathtalk: https://mathtalk.com/mathtalk-commands-voicing-calculus/

repeats!:   z -> 0, zz -> z.  e-> =, ee-> e
shift-key or something to open parens...mathtalk did "function foxtrot" and it
automatically created f() with cursor in the parens
you can look for "key held down" with a combination of keeping track of down and up events

;a whole buttload of modes for raw input: if they want to type raw latex, let them



** editing GREAT WISDOMS HERE  
*** i am pro-mode? 

*** edit-mode and write-mode
**** maybe different names, maybe not even letters as hotkeys (\)


*** thoughts from nat
dirtier/more tree focused

must remain comprehensible at base, everything else is on top of that
^ or u, rather than creating some special ui, just replaces current node w/^, moves old current node down one, and changes author focus to 2nd



need to parse/interpret streams of keystrokes
also expansion/abbreviation

2eu

also must be able to take math symbols not on the keyboard, likely through Latex: \int, \sigma.  maybe doable through hotkeys, but...
really I'd work on the basic algebra flow right now.  How quickly can you write 0 = 4x^2 + 4x + 1?  (2x+ 1) (2x + 1)

authoring needs to be FAST, as does editing
lots of "tricks" in the parser:  letter followed by a 2 should take it as a "squared"
but a lot of focus on the tree nature as well; doing things "manually" should be almost as good




selectors on trees like selectors in css



keep authoring and editing very simple (in the Hickey sense)




*** this is the meat.  this is what you want to be best at.
*** few keystrokes, power, a small amount of abstraction/meta
*** but aim for apl over lisp
*** this is the sort of thing that you discover by playing with
*** can override browser shortcuts:
          (do (.stopPropagation ev)
              (.preventDefault ev))
*** you must make the user feel like a superhero from day 1
*** we're only listening for keydown events right now
*** goog.events has keypress, keydown, keyup
*** https://keycode.info/
*** we can distinguish between lcontrol and rcontrol (and shifts) 
*** https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
*** keypress is deprecated

* collapse, display (mini*latex! holy crap!)
* undo...if we go reframe we get this for free, might be worth.  latex pipeline first tho
* tree operations


* when allowing user-written fns, allow cljs or js; turn into js datastructures, then back into cljs, before/after js fns run

0    0,z  
1    on
2    tw
3    th
4    fo
5    fi
6    si
7    se
8    ei
9    ni
10   te

* ;multiple layers of abstraction; stuff like this for authoring, but much 
much much more power when working with trees
; BUTTLOAD OF USER SUPPORT is the point.  This is an apl, not an emacs or lisp
; meant to be mastered and requiring learning, but specifically *not* to be customizeable
; users should know there's an end
; to that end the first experience must be AMAZING

sl - select left side of equation
key chords, plentiful documentation, easily adjustable documentation

If Lyx is Lisp, make this python or apl---not as powerful, but made for normies and efficient at it

https://www.reddit.com/r/emacs/comments/97dl18/my_adventures_in_emacsifying_the_browser/


ypexsoys

applicative lang


what about stack-based, f'real tho?



* implicit multiplication
** ugh
** apply to vars, nums, and close-parens?
** gets worse when you have something like x^2 * y,
*** which would be written as xsqy (fine) or xexp2y (not fine)
*** the trick is there seem to be different orders of operations involved
*** you can maybe deal w/this by using different types for terms?



couple things: don't be afraid to have the user use modes or other hoops to make parsing easier
the focus should be on consistency and power more than anything.

so things like v+letter -> 


are we making this too hard?

no, I don't think so, we need to be getting some structure anyway if we want to allow for manipulation

we have to be careful about "manipulation," though, we want to enable *structural* stuff, don't want to do the actual calculation for them
which makes authoring even MORE important, but again "important" doesn't mean "easy to do everything for the newcomer"

where we do want some program awareness of what we're working on is for typesetting and keeping the datastructure clear

In other words, we don't want to do any thinking for the user, but we don't want THEM to have to do any thinking for US either.

We shouldn't be inferior to a piece of paper!

easy navigation---wasd and ijkl

they SHOULD know about the expression tree, it should be their friend, they should understand it

actually this is important stuff---

it shouldn't be smart enough to, say, "multiply everything in this expression by 5," ---they should do that---

but it should know that deleting [:plus 2] from [:sum [:plus 2] [:plus 3]] just yields 3

v. minor programming should be encouraged, a la keyboard macros, etc

What to work on now?

Let the user loop be your guide: so, right now, it's connecting authoring to rendering
